// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: todo_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error)
	GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (TodoService_GetTodosClient, error)
	GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoResponse, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (TodoService_UploadImageClient, error)
	FeedbackTodo(ctx context.Context, opts ...grpc.CallOption) (TodoService_FeedbackTodoClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error) {
	out := new(CreateTodoResponse)
	err := c.cc.Invoke(ctx, "/todoGoGrpc.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (TodoService_GetTodosClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/todoGoGrpc.TodoService/GetTodos", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetTodosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_GetTodosClient interface {
	Recv() (*GetTodosResponse, error)
	grpc.ClientStream
}

type todoServiceGetTodosClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetTodosClient) Recv() (*GetTodosResponse, error) {
	m := new(GetTodosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoResponse, error) {
	out := new(GetTodoResponse)
	err := c.cc.Invoke(ctx, "/todoGoGrpc.TodoService/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (TodoService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], "/todoGoGrpc.TodoService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceUploadImageClient{stream}
	return x, nil
}

type TodoService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type todoServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *todoServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) FeedbackTodo(ctx context.Context, opts ...grpc.CallOption) (TodoService_FeedbackTodoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], "/todoGoGrpc.TodoService/FeedbackTodo", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceFeedbackTodoClient{stream}
	return x, nil
}

type TodoService_FeedbackTodoClient interface {
	Send(*FeedbackTodoRequest) error
	Recv() (*FeedbackTodoResponse, error)
	grpc.ClientStream
}

type todoServiceFeedbackTodoClient struct {
	grpc.ClientStream
}

func (x *todoServiceFeedbackTodoClient) Send(m *FeedbackTodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceFeedbackTodoClient) Recv() (*FeedbackTodoResponse, error) {
	m := new(FeedbackTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error)
	GetTodos(*GetTodosRequest, TodoService_GetTodosServer) error
	GetTodo(context.Context, *GetTodoRequest) (*GetTodoResponse, error)
	UploadImage(TodoService_UploadImageServer) error
	FeedbackTodo(TodoService_FeedbackTodoServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoServiceServer) GetTodos(*GetTodosRequest, TodoService_GetTodosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoServiceServer) GetTodo(context.Context, *GetTodoRequest) (*GetTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoServiceServer) UploadImage(TodoService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedTodoServiceServer) FeedbackTodo(TodoService_FeedbackTodoServer) error {
	return status.Errorf(codes.Unimplemented, "method FeedbackTodo not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoGoGrpc.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTodosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).GetTodos(m, &todoServiceGetTodosServer{stream})
}

type TodoService_GetTodosServer interface {
	Send(*GetTodosResponse) error
	grpc.ServerStream
}

type todoServiceGetTodosServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetTodosServer) Send(m *GetTodosResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoGoGrpc.TodoService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodo(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).UploadImage(&todoServiceUploadImageServer{stream})
}

type TodoService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type todoServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *todoServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_FeedbackTodo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).FeedbackTodo(&todoServiceFeedbackTodoServer{stream})
}

type TodoService_FeedbackTodoServer interface {
	Send(*FeedbackTodoResponse) error
	Recv() (*FeedbackTodoRequest, error)
	grpc.ServerStream
}

type todoServiceFeedbackTodoServer struct {
	grpc.ServerStream
}

func (x *todoServiceFeedbackTodoServer) Send(m *FeedbackTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceFeedbackTodoServer) Recv() (*FeedbackTodoRequest, error) {
	m := new(FeedbackTodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoGoGrpc.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoService_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodoService_GetTodo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTodos",
			Handler:       _TodoService_GetTodos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _TodoService_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FeedbackTodo",
			Handler:       _TodoService_FeedbackTodo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "todo_service.proto",
}
